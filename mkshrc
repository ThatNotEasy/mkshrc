#!/bin/env sh

# ==UserScript==
# @name         mkshrc
# @namespace    https://github.com/hyugogirubato/mkshrc/blob/main/mkshrc
# @version      3.0
# @description  Make an advanced shell environment for Android devices
# @author       hyugogirubato
# @match        Android
# @source       https://github.com/Zackptg5/Cross-Compiled-Binaries-Android
# ==/UserScript==


# Function to check if a command exists
function _exist() {
  command -v "$1" >/dev/null 2>&1
}

# Function to ensure the file exists and set its ownership and permissions
function _exec() {
  local path=$1
  [ ! -e "$path" ] && return 1 # Exit if the file does not exist
  chown shell:shell "$path" >/dev/null 2>&1 # Change ownership to shell:shell
  chmod 755 "$path" >/dev/null 2>&1 # Set file permissions to executable
}

# Function to resolve a command's actual binary path, handling aliases
function _resolve() {
  local binary="$1"
  local alias=$(command -v "$binary" 2>/dev/null)
  if echo "$alias" | grep -q '^alias '; then
    binary=$(echo "$alias" | grep -o '^alias .*$' | cut -d "'" -f2) # Extract alias target
  fi
  echo "$binary"
}

# Environment variable setup
export HOSTNAME=$(getprop ro.boot.serialno) # Get the device serial number
export USER=$(id -u -n) # Get the username
export LOGNAME=${USER} # Set LOGNAME to match USER
export TMPDIR='/data/local/tmp' # Temporary directory
export STORAGE='/storage/emulated/0' # Default storage path

# Create a directory for custom binaries and ensure permissions
PARENT="${TMPDIR}/bin"
mkdir -p "$PARENT"
_exec "$PARENT"
# Add the directory to PATH if not already included
echo "$PATH" | grep -q "$PARENT" || export PATH="$PATH:$PARENT"

# Enable color prompts if the terminal supports it
echo "$TERM" | grep -qE 'xterm-color|.*-256color' && color_prompt=yes
if [ "$color_prompt" = yes ]; then
  # Set aliases for common commands with color output
  alias ls='ls --color=auto'
  alias grep='grep --color=auto'
  alias fgrep='fgrep --color=auto'
  alias egrep='egrep --color=auto'
  alias logcat='logcat -v color'
  alias ip='ip -c'
  alias diff='diff --color'
fi

# Add additional convenience aliases
alias ll="$(_resolve ls) -alF" # List with details
alias la="$(_resolve ls) -A"  # List almost all files
alias l="$(_resolve ls) -CF" # Compact file listing
alias ipa="$(_resolve ip) a" # Show IP addresses
alias rm='rm -rf' # Force delete recursively
[ $(ps -A | wc -l) -gt 1 ] && alias ps='ps -A' # Use ps -A if available

# Path to busybox binary, attempt to locate it
busybox="$PARENT/busybox"
[ ! -f "$busybox" ] && _exist magisk && busybox="$(magisk --path)/.magisk/busybox/busybox"

# Ensure a .gitkeep file exists in the custom bin directory
keep="$PARENT/.gitkeep"
if [ ! -f "$keep" -a -f "$busybox" ]; then
  _exec "$busybox"
  # Create symbolic links for all busybox utilities
  for bin in $($busybox --list | grep -vE '^man$'); do
    if ! _exist "$bin"; then
      ln -s "$busybox" "$PARENT/$bin"
    fi
  done
fi

# Touch the .gitkeep file to ensure the directory is not empty
touch "$keep"
_exec "$keep"

# Create a custom colored find command if both find and color support are available
_exist 'find' && [ "$color_prompt" = yes ] && {
  local binary="$PARENT/cfind"
  echo "find \$@ | sed 's/\\n/ /g' | xargs ls --color=auto -d1" > "$binary"
  _exec "$binary"
}

# Custom implementation of the `man` command for help output
function man() {
  local binary="$1"
  [ -z "$binary" ] && { echo -e "What manual page do you want?\nFor example, try 'man ls'." >&2; return 1; }
  manual=$($binary --help 2>&1)
  [ $(echo $?) -eq 127 -o -z "$manual" ] && { echo "No manual entry for $binary" >&2; return 16; }
  $binary --help
}
export man

# Add sudo command support if running as root or if `su` is available
if [ $(id -u) -eq 0 ] || _exist 'su'; then

  function sudo() {
    [ $# -eq 0 ] && { echo 'Usage: sudo <command>' >&2 ; return 1; }
    local binary=$(_resolve $1)
    local prompt=$(echo "$@" | sed "s:$1:$binary:g")

    if [ $(id -u) -eq 0 ]; then
      $prompt
    else
      _exist 'su' || { echo 'su binary not found' >&2; return 127; }
      su -c "$prompt"
    fi
  }
  export sudo

  # Setup Frida server management
  frida="$PARENT/frida-server"
  if [ -f "$frida" ]; then
    _exec "$frida"

    function frida() {
      local action="$1"
      case "$action" in
        start)
          # Start Frida server
          frida status >/dev/null 2>&1 && { echo 'Frida is already running.' >&2; return 1; }
          sudo setenforce 0 >/dev/null 2>&1
          sudo frida-server -D || { echo 'Failed to start Frida.' >&2; return 1; }
          ;;
        status)
          # Check if Frida server is running
          local pid=$(pgrep -f frida-server)
          [ -z "$pid" ] && { echo 'Frida is not running.' >&2; return 1; }
          echo "Frida is running with PID: $pid"
          ;;
        stop)
          # Stop Frida server
          sudo kill -9 $(pgrep -f frida-server) 2>/dev/null
          sudo setenforce 1 >/dev/null 2>&1
          sleep 1

          if frida status >/dev/null 2>&1; then
            _exist magisk && echo 'Use Magisk to stop Frida.' >&2 || echo 'Frida is still running.' >&2
            return 1
          fi
          ;;
        *)
          # Invalid usage
          echo 'Usage: frida {start|status|stop}' >&2
          return 1
          ;;
      esac
    }
  fi
  export frida

fi